import os
import psutil
import shutil
import subprocess
import requests
import sys

def auto_update():
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    repo_url = "https://raw.githubusercontent.com/sasha14567890-23457878778787778787878/nika_helper/refs/heads/main/app.py"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL
    try:
        response = requests.get(repo_url)
        if response.status_code == 200:
            with open(__file__, 'wb') as f:
                f.write(response.content)
            print("‚úîÔ∏è –£—Ç–∏–ª–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            os.execl(sys.executable, sys.executable, *sys.argv)
        else:
            print("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def open_folders():
    print("üìÇ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏...")
    folders = ["%temp%", "C:\\Windows\\Temp", os.path.expanduser("~\\AppData\\Local\\Temp")]
    for folder in folders:
        print(f"–û—Ç–∫—Ä—ã–≤–∞—é: {folder}")
        os.system(f'start {folder}')

def clear_temp():
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    folders = [os.getenv('TEMP'), os.getenv('TMP'), 'C:\\Windows\\Temp']
    for folder in folders:
        try:
            for root, dirs, files in os.walk(folder):
                for name in files:
                    file_path = os.path.join(root, name)
                    try:
                        os.unlink(file_path)
                    except PermissionError:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–Ω—è—Ç–æ–π —Ñ–∞–π–ª: {file_path}")
                for name in dirs:
                    dir_path = os.path.join(root, name)
                    try:
                        shutil.rmtree(dir_path)
                    except PermissionError:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–Ω—è—Ç–∞—è –ø–∞–ø–∫–∞: {dir_path}")
            print(f"‚úîÔ∏è –û—á–∏—â–µ–Ω–æ: {folder}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {folder}: {e}")

def clear_ram():
    print("üî• –û—á–∏—Å—Ç–∫–∞ RAM...")
    try:
        os.system('echo Clearing RAM...')
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –∫–æ—Ä–∑–∏–Ω—ã
        recycle_bin = subprocess.check_output('powershell.exe Get-ChildItem C:\\$Recycle.Bin', shell=True)
        if recycle_bin:
            os.system('powershell.exe Clear-RecycleBin -Force')  # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        print("‚úîÔ∏è RAM –æ—á–∏—â–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ RAM: {e}")

def monitor():
    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã...")
    print(f"CPU: {psutil.cpu_percent()}%")
    print(f"RAM: {psutil.virtual_memory().percent}%")
    print(f"–î–∏—Å–∫: {psutil.disk_usage('/').percent}%")

def manage_autorun():
    print("‚öôÔ∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º...")
    try:
        subprocess.run(['powershell', 'explorer.exe', 'shell:startup'], check=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    auto_update()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    while True:
        print("\nüîß –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ü–ö")
        if input("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏? (y/n): ").lower() == 'y':
            open_folders()
        if input("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º—É—Å–æ—Ä? (y/n): ").lower() == 'y':
            clear_temp()
        if input("üî• –û—á–∏—Å—Ç–∏—Ç—å RAM? (y/n): ").lower() == 'y':
            clear_ram()
        if input("üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? (y/n): ").lower() == 'y':
            monitor()
        if input("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫? (y/n): ").lower() == 'y':
            manage_autorun()
        
        if input("üîå –í—ã–π—Ç–∏? (y/n): ").lower() == 'y':
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break

if __name__ == '__main__':
    main()
